rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users can only read and create their own user document
    match /users/{userId} {
      allow read, create: if request.auth != null && request.auth.uid == userId;
      // Add update/delete rules if needed (e.g., user can update their own profile)
      allow update, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Companies: only users with matching companyId claim can read company document
    match /companies/{companyId} {
      allow read: if request.auth != null &&
                  request.auth.token.companyId == companyId;
      // Consider add write/update/delete rules for admins if needed
      allow write, update, delete: if request.auth != null &&
                                   request.auth.token.role == "admin" &&
                                   request.auth.token.companyId == companyId;
    }

    // Users subcollection under companies: user can read/write own user doc
    // Admins of the company can read/write any user in the company
    match /companies/{companyId}/users/{userId} {
      allow read, write: if request.auth != null && (
        request.auth.uid == userId ||
        (request.auth.token.role == "admin" &&
         request.auth.token.companyId == companyId)
      );
    }

    // Leads accessible to roles admin, csr, telecaller within same company
    match /leads/{leadId} {
      allow read, write: if request.auth != null &&
                         request.auth.token.companyId == resource.data.companyId &&
                         request.auth.token.role in ['admin', 'csr', 'telecaller'];
    }

    // Events accessible to roles admin, outreach, volunteer within same company
    match /events/{eventId} {
      allow read: if request.auth != null &&
                  request.auth.token.companyId == resource.data.companyId &&
                  request.auth.token.role in ['admin', 'outreach', 'volunteer'];
      // Add write/update if needed for authorized roles
      allow write, update: if request.auth != null &&
                           request.auth.token.companyId == resource.data.companyId &&
                           request.auth.token.role in ['admin', 'outreach'];
    }

    // Volunteer hours:
    match /volunteer_hours/{hourId} {
      // Volunteers can create their own volunteer hour records
      allow create: if request.auth != null &&
                    request.auth.uid == request.resource.data.volunteerId;

      // Volunteers can read their own volunteer hour records
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.volunteerId ||
        (request.auth.token.role == "admin" &&
         request.auth.token.companyId == get(/databases/$(database)/documents/users/$(resource.data.volunteerId)).data.companyId)
      );

      // Admins can update volunteer hours if company matches and certain fields are not changed
      allow update: if request.auth != null &&
                    request.auth.token.role == "admin" &&
                    request.auth.token.companyId == get(/databases/$(database)/documents/users/$(resource.data.volunteerId)).data.companyId &&
                    !("volunteerId" in request.resource.data) &&
                    !("eventId" in request.resource.data);
      
      // Deletion can be restricted or allowed similarly, add if needed
    }

    // Default deny rule for all other documents/collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
